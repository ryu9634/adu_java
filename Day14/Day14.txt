쓰레드(Thread)

프로세스
- 윈도우 작업 관리자에서 프로세스 탭에 올라와 있는 어플리케이션 하나
- 운영체제로부터 필요한 메모리를 할당받아 어플리케이션의 코드를 실행

멀티 태스킹
- 두 가지 이상의 작업을 동시에 처리하는 것
- 병렬작업

쓰레드
- 하나의 프로세스 내부에서 독립적으로 실행되는 작업단위
- 운영체제에 의해 관리되는 하나의 작업 혹은 Task를 의미
- 다중 쓰레드 작업시에는 각 쓰레드끼리 정보를 주고 받을 수 있어 처리 과정의 오류를 줄일 수 있음
- 프로세스끼리는 정보를 주고 받을 수 없음
- JVM에 의해 하나의 프로세스가 발생, main() 안에 실행문들이 하나의 쓰레드
- main() 외에 또 다른 쓰레드를 만들려면 Thread 클래스를 상속하거나 Runnable 인터페이스를 구현함

멀티쓰레딩
- 여러 쓰레드를 동시에 실행시키는 응용프로그램을 작성하는 기법
- 메모리 공유로 인한 시스템 자원 소모가 줄어듬
- 동시에 두가지 이상의 활용이 가능
- 서로 장원을 소모하다가 충돌이 일어날 가능성이 있음
- 코드가 난해해질 가능성이 있음

✔ Thread 클래스는 start() 실행시 run() 메소드가 수행되도록 내부적으로 처리

쓰레드 생성 방법 1 (Thread 클래스 상속)
    public class 클래스명 extends Thread {

        public void run(){
            쓰레드 객체가 start() 호출하면 실행될 문장;
            ...
        }
    }

    자료형 참조변수 = new 클래스명();
    참조변수.start();

쓰레드 생성 방법 2 (Runnable 인터페이스를 구현)

    public class 클래스명 implements Runnable {
        public void run(){
            쓰레드 객체가 start() 호출하면 실행될 문장;
            ...
        }
    }

    Runnable 참조변수1 = new 클래스명();
    Thread 참조변수2 = new Thread(참조변수1);
    참조변수2.start();


람다 표현식
- 함수형 인터페이스

    참조변수타입 참조변수 = 람다 표현식

    public class Calc1 {
        public int func1(x, y){
            int result = x < y ? x : y;
            return result;
        }
    }

    Calc calc = (x, y) -> x < y ? x : y;


동기화(synchronized)
- 멀티 쓰레드 프로세스에서는 다른 쓰레드의 작업에 영향을 미칠 수 있기 때문에, 진행중인 작업이
다른 쓰레드에 간섭을 받지 않게 하려면 동기화가 필요
- 동기화를 하려면 간섭받지 않아야 하는 문장 또는 메소드를 락을 걸어 단 하나의 쓰레드만 출입이 가능

✔ 문장 또는 메소드를 락을 설정하는 영역을 '임계영역'이라고 함

    메소드
        public synchronized 반환형 메소드명(매개변수1, ..){

        }
    문장
        synchronized (this) {

        }

join
- 쓰레드는 메인쓰레드가 종료되어도 다른 쓰레드는 백그라운드에서 동작하기 종료되지 않음
- join을 사용하면 다른 쓰레드가 종료될 때까지 메인쓰레드가 기다림


쓰레드 스케줄링
- 쓰레드의 개수가 코어의 수보다 많을 경우 쓰레드를 어떤 순서에 의해 동시성으로 실행할 것인지를 계획
- 아주 짧은 시간에 쓰레드의 run 메소드를 번갈아가며 실행

우선순위(priority) 방식
1. 우선순위가 높은 쓰레드가 실행상태를 더 많이 가져감
2. 객체에 우선순위를 부여하여 개발자가 제어 가능
3. 1부터 10까지 우선순위를 정할 수 있고 높을수록 먼저 실행
    thread.setPriority(우선순위 숫자);
4. 우선 순위가 높은 쓰레드가 실행기회를 더 많이 가지기 때문에 우선순위가 더 낮은 쓰레드보다 같은
작업을 하더라도 빨리 끝낼 수 있음

Thread의 생성주기

    start()             <-----------------------------
    쓰레드 생성  ----> Runnable ----> Running ----> Blocked ----> Dead
                                     run()

Runnable : 쓰레드가 실행되기 위해 준비하는 단계
Running : 스케줄러에 의해 선택된 스레드가 실행되는 단계
Blocked : 쓰레드가 작업을 완수하지 못하고 잠시 작업을 멈추는 단계
    wait() : 쓰레드 대기, notify() : 쓰레드 재시작


과제
마스크 공장 프로그램 만들기

    Mask
    sell() : 마스크를 판매
    push() : 마스크를 생산 (랜덤 5, 3, .. 1000초)

    Customer
    run() : 마스크를 구입

1. 마스크 생산과 고객의 쓰레드를 만들기
2. 마스크 생산은 랜덤하게(1~10 1초마다) 생산
3. 고객은 1초마다 랜덤하게 구입
4. 마스크의 개수가 모자르면 고객의 쓰레드는 잠시 멈춤
(마스크의 개수가 10를 넘으면 다시 고객의 쓰레드는 대기)

마스크 4개 생산 (총 ..개)
마스크 3개 생산 (총 ..개)
고객 2개 구매 (총 ..개)
고객 5개 구매 (총 ..개)
...
마스크 개수가 모자라 잠시 판매가 중지되었습니다
마스크 4개 생산
...




