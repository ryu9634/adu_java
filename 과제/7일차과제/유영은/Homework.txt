- 상속 : 기존의 클래스에 기능을 추가하거나 재정의하여 새로운 클래스를 정의하는 것
class Parent {
    private String name = "김하나";
    private int age = 20;
}
class child extends Parent {
    System.out.println("이름 : " + name);
    System.out.println("나이 : " + age);

}


- 접근제어자 :클래스의 멤버에 대한 접근을 제한하기 위해 사용하는 것
public class Product {//1
    private int no;
    public String name;
    private int price;
    private String company;
    private String date;
}

- super키워드 : 부모 클래스로부터 상속받은 필드나 메소드를 자식 클래스에서 참조하는 데 사용하는 참조 변수입니다
class Parent {
    int a;
    Parent() { a = 10; }
    Parent(int n) { a = n; }
}
class Child extends Parent {
    int b;
    Child() {
        super();
        b = 20;
    }


- this키워드 :자신이 속한 클래스의 객체임을 표시하는 것
class A {
    int m;
    int n;
    void init(int a, int b) {
        int c  = 3;
        this.m = a;
        this.n = b;
    }
    void work() {
    this.init(2,3);
    }
}


- 생성자 :객체의 생성 시에만 호출되어 메모리 생성과 동시에 객체의 데이터를 초기화하는 역할을 함
class Phone {
    private String Name;
    private int Year;
    private String color;
    private double inch;

    Phone(String modelName, int modelYear, String color, double inch) {
        this.Name = Name;
        this.Year = Year;
        this.color = color;
        this.inch = inch;
    }
    public String getModel() {
        return this.modelYear + "년 출시 " + this.modelName + " " + this.color;
    }
}
public class Method {
    public static void main(String[] args) {
        Phone phone = new Car("iphone13", 2021, "흰색", 6.7);
        System.out.println(phone.getModel());
    }
}



- 오버로딩 : 서로 다른 시그니처를 갖는 여러 메소드를 하나의 이름으로 정의하는 것
public static void progfile(String name) {
    System.out.println("이름 : " + name);
}
public static void profile(String name, int age) {
    System.out.println("이름 : " + name);
    System.out.println("나이 : " + age);
public static void profile(String name, int age, String hobby){
    System.out.println("이름 : " + name);
    System.out.println("나이 : " + age);
    System.out.println("취미 : " + hobby);
}

public static void main(String[] args) {
    profile("김하나");
    profile("김민지", 25);
    profile("정해인", 30, "농구");
}


- 오버라이딩 : 상속 관계에 있는 부모 클래스에서 이미 정의된 메소드를 자식 클래스에서 같은 시그니쳐를 갖는 메소드로 다시 정의하는 것
class Dog {
    void sound(){
    system.out.println("왈왈");
    }
}
class Puppy extends Dog {
    @Override
    void sound() {
    System.out.println("멍멍");
    }
}

public class Test{
    public static void main(String args[]) {
        Dog dog = new Dog();
        dog.sound();
        Puppy puppy = new Puppy();
        puppy.sound();
    }
}