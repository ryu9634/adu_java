상속
부모클래스로부터 상속받은 자식클래스는 부모클래스의 모든 자원과 메소드 등을 자신의 것처럼 사용할 수 있다

class a{
    private String name;
    private String address;
    private int age;
}

class b extends a{
    System.out.println("이름: " + name);
    System.out.println("주소: " + address);
    System.out.println("나이: " + age);
}
---------------------------------------------
접근제어자
클래스 멤버에 대한 접근을 제한하기위해 사용. 접근제어자를 별도로 설정하지 않으면 default 접근 제어자가 됨

public class a{
    private String name;    // private
    String address;    // default
    protected int age;  // protected
    public String info; // public
}
---------------------------------------------
super 키워드
상속 관계에서 부모 클래스의 메소드나 필드를 명시적으로 참조하기 위해 사용됨.
만약 부모 클래스의 메소드나 필드를 오버라이드한 경우에 super를 사용하면 부모 클래스의 메소드나 필드 호출 가능

// 부모클래스
class parent{
    public void print(){
    System.put.println("부모 클래스의 print() 메소드")
    }
}

//자식클래스
public class child extends parent{
    public void print(){
        super.print();
        System.out.println("자식 클래스의 print() 메소드")
    }

public static void main(String[] args){
    child obj = new child();
    obj.print();
}
}
---------------------------------------------
this 키워드
인스턴스 자기 자신을 가리키는 키워드. this 키워드는 이 클래스를 기반으로 생성된 인스턴스를 가리키는 참조

public class This1 {
    private String name;
    private int age;
    private String address;

    public This1(){
        this.name = "홍길동";
        this.age = 20;
        this.address = "korea";
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public This1 returnThis1(){
        return this;
    }
}

---------------------------------------------
생성자
new 연산자와 같이 사용되어 클래스로부터 객체를 생성할 때 호출되어 객체의 초기화를 담당.
인스턴스 변수의 초기화 작업에 주로 사용, 인스턴스 생성시 실행되어야 할 작업을 해서도 사용.

class A{
    String Name;
    String Address;
    int age;

    Info(){}
    Info(String a, String b, int c){
    Name = a;
    Address = b;
    age = c;
    }
}

class Atest{
    public static void main(String[] args){
        A t1 = new A();
        t1.Name = "홍길동";
        t1.Address = "korea";
        t1.age = 20;

        A t2 = new A("홍길동", "korea", 20);
        System.out.println("t1의 이름: " + t1.Name + ", " + "t1의 주소: " + t1.Address + ", " + "t1의 나이: " + t1.age)
        System.out.println("t2의 이름: " + t2.Name + ", " + "t2의 주소: " + t2.Address + ", " + "t2의 나이: " + t1.age)
    }
}
---------------------------------------------
오버로딩
서로 다른 특징을 가진 여러 메소드를 하나의 이름으로 정의
메소드를 만들때 이름은 같고 매개변수의 개수나 타입이 다른 여러개의 메소드 생성 가능

public void test(){
    System.out.println("메소드");
}

public void test(int i){

}

public void test(boolean i){

}

public void test(int i, boolean b){

}

public String test(){
    return "test";
}
---------------------------------------------
오버라이딩
상위 클래스에서 가지고 있는 메소드를 하위 클래스의 메소드에서 재정의해서 사용.

public class A{
    public String name;
    public int age;

    public void print(){
        System.out.println("이름" + this.name + ", 나이: " + this.age);
    }
}

public class B extends A{
    String Address;

    public void print(){
        System.out.println("이름: " + this.name + ", 나이: " + this.age + "주소: " + ", this.Address");
    }
}