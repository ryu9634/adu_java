    용어 정리
        1. 상속(inheritance) : 기존 클래스에 정의되어 있던 모든 필드와 메소드를 물려받아 새로운 클래스를 만듦
                              이때 기존 클래스를 부모 클래스, 물려받아 새롭게 작성한 클래스를 자식 클래스라고 함
            - 장점 : 기존에 작성된 클래스를 재활용하여 사용하며, 자식 클래스 설계시 중복되는 필드, 메소드를 미리 작성해두면 자식 클래스에서는 별도로 작성하지 않아도 됌
            - 자식 클래스 선언 방법 : class 자식 클래스명 extend 부모 클래스명{}
            - Object 클래스 : 모든 클래스의 부모가 되는 기초 클래스로 자바의 모든 클래스는 Object 클래스에서 상속받아 사용하게 되며,
                             기초적인 클래스이기 때문에 상속받을 클래스에 굳이 extend object를 선언하지 않아도 상속이 가능하다.
                             * toString(), clone()과 같은 메소드도 Object 클래스에 귀속되어 있는 메소드이기 때문에
                               별도 클래스를 생성, 상속하지 않아도 사용 가능

           * 멤버(Member) : 클래스 설계시 필요한 필드와 메소드
           * 패키지(package) : 연관성이 있는 클래스들을 함께 묶어 관리하는 디렉토리
                              다인 프로젝트시 클래스명이 겹쳐 발생하는 충돌 문제도 해결 가능
        2. 접근제어자(access modifier) : 객체 지향 프로그램에서 사용자에게 최소한의 정보로 손쉽게 프로그램을 이용할 수 있게 하기 위해
                                       사용자가 알 필요가 없는 정보는 숨긴다는 개념
            - 접근 제어자 종류
                private : private을 선언하게되면 해당 클래스는 외부에서 직접 접근 불가
                          private을 접근하고자 하면 private에서 선언한 public 메소드를 통해서만 접근 가능
                      예) private int count = 0;                       // 외부에서 count 변수에 접근 불가
                          public void click(){                         // click 이라는 메소드를 통해 count 호출 가능
                                count++;                               // 같은 클래스 내에서 선언된 public click를 외부에서 호출시 private의 count 변수에 숫자를 추가 함
                         }

                public : 어디서든 접근 가능하며 같은 클래스의 public 메소드를 통해서만 private에 접근 가능

                default : 클래스 접근 제어의 기본적인 값으로 default의 경우 별도 선언을 하지 않아도 되며,
                          같은 패키지 내 클래스 사이에서만 접근 가능

                protected : 현재 클래스와 동일한 패키지거나 자식 패키지 혹은 다른 패키지더라도 protected를 선언한 클래스를 상속 받을 시 접근 할 수 있다.

        3. super 키워드 : 부모 클래스로부터 상속받은 멤버(필드, 메소드)를 자식 클래스에서 사용하기 위해 필요한 참조 변수
            - super() 키워드 : 부모 클래스에서 호출한 멤버(필드, 메소드)를 초기화하기 위한 생성자를 호출할 때 사용

            * 메소드의 시그니처 : 메소드의 이름과 메소드 내에 선언된 매개 변수의 리스트
        4. this 키워드 : 매개 변수에서 선언한 자기 자신을 참조하기 위해 사용하는 참조 변수
            - this() 키워드 : 생성자 내부에서만 사용 가능하며 같은 클래스의 다른 생성자를 호출할 때 사용
                             this()에 매개 변수를 작성하면 메소드 내 시그니처 위치가 일치하는 생성자를 찾아 호출

        5. 생성자 : 객체 생성시 변수를 원하는 값으로 초기화(초기 세팅)할 수 있게 하는 메소드
                   * 생성자 선언 전 초기 값 str = null, 선언 후 초기 값 str = "무명"

        6. 오버로딩 : 서로 다른 시그니처를 갖는 여러개의 메소드를 하나의 이름으로 새로이 정의 하는 것

        7. 오버라이딩 : 부모 클래스에서 정의된 메소드를 자식 클래스가 상속받을때 해당 메소드의 시그니처를 다시 정의 하는 것
                      메소드의 기능만 재정의하므로 자식 클래스에서 오버라이딩시 기존 부모클래스의 메소드와 같아야 함
                      부모 클래스의 접근 제어자보다 좁은 범위로 변경할 수 없으며 부모 클래스의 메소드보다 더 큰 범위의 예외를 선언할 수 없음