✔상속
1.정의: 기존의 크랠스에 기능을 추가하거나 재정의하여 새로운 클래스를 정의하는 것
2.특징: 기존에 정의된 클래스의 모든 필드와 메소드를 물려받아 새로운 클래스 생성 가능
-기존에 정의된 클래스: 부모클래스/상위클래스/기초클래스
-새롭게 작성되는 클래스: 자식클래스/하위클래스/파생클래스
3.장점:
1)기존에 작성된 클래스 재활용 가능
2.자식클래스 설계 시 중복되는 멤버를 미리 부모클래스에 작성해 놓으면, 자식클래스에서는 해당 멤버 작성하지 않아도 됨
3.클래스 간의 계층적 관계를 구성함으로써 다형성의 문법적 토대를 마련

✔접근제어자
1.정의:클래스 외부에서의 직접적인 접근을 하용하지 않는 멤버를 설정하여 정보 은닉 구체화 가능
2.종류:
1)private:외부에 공개되지 않으며 외부에서 직접접근 불가
2)public:외부에 공개되며, 프로그램 어디에서나 직접 접근 가능
3)default:지정되지 않으면 자동적으로 default 접근 제어 가짐
4)protected:같은 클래스의 멤버와 같은 패키지에 속하는 멤버에서만 접근 가능

✔super 키워드
1.정의:부모클래스로부터 상속받은 필드나 메소드를 자식클래스에서 참조하는 데 사용하는 참조 변수 - 부모클래스의 멤버에 접근 가능
2.super(): 부모클래스의 생성자 호출 시 사용

✔this 키워드
1.정의:인스턴스가 바로 자기 자신을 참조하는 데 사용하는 변수, this참조 변수 -? 해당 인스턴스의 주소를 가리킴
2.this(): 생성자 내부에서만 사용 가능, 같은 클래스의 다른 생성자 호출 시 사용
-this() 메소드에 인수를 전달하면, 생성자 중에서 메소드 시그니처가 일치하는 다른 생성자를 찾아 호출.

✔생성자
1.정의:객체의 생성과 동시에 인스턴스 변수를 원하는 값으로 초기화할 수 있도록 하는 메소드
-생성자의 이름은 해당 클래스의 이름과 같아야함
2.특징:
1)생성자는 반환값이 없지만,반환 타입을 void형으로 선언하지 않음
2)생성자는 초기화를 위한 데이터를 인수로 전달 받을 수 잇음
3)객체를 초기화하는 방법이 여러개 존재할 경우에는 하나의 클래스가 여러개의 생성자를 가질 수 있음
-생성자도 하나의 메소드이므로, 메소드 오버로딩이 가능

✔오버로딩
1.정의: 같은 이름의 메소드를 중복하여 정의하는 것
-매개변수의 개수나 타입을 다르게 함
즉, 서로 다른 시그니처를 갖는 여러 메소드를 같은 이름으로 정의하는 것
2.장점:
1)메소드에 사용되는 이름 절약 가능
2)메소드 호출 시 전달해야 할 매개변수의 타입이나 개수에 대해 크게 신경 쓰지 않고 호출 가능
3).조건:
1)메소드의 이름이 같아야 함
2)메소드의 시그니처, 즉 매개변수의 개수 또는 타입이 달라야 함

✔오버라이딩
1.정의:상속 관계에 있는 부모클래스에서 이미 저으이된 메소드를 자식클래스에서 같은 시그니처를 갖는 메소드로 다시 정의하는 것
즉, 상속받은 부모클래스의 메소드를 재정의하여 사용하는 것을 의미
2.조건:
1)메소드의 동작만을 재정의하는 것이므로, 메소드의 선언부는 기존 메소드와 완전히 같아야 함,
하지만 메소드의 반환 타입은 부모클래스의 반환 타입으로 타입 변환할 수 잇는 타입이라면 변경 가능
2)부모클래스의 메소드보다 접근 제어자를 더 좁은 범위로 변경할 수 없음
3)부모클래스의 메소드보다 더 큰 범위의 예외를 선얼할 수 없음.



















