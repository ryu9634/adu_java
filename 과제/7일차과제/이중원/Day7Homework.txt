아래 용어에 대해 조사하고 예제를 만들어보자.

1. 상속
- 기존의 클래스에 기능을 추가하거나 재정의하여 새로운 클래스를 정의하는 것
- 상속성, 다형성이 중요함
- 상속의 상속성
    1. 상위 개념의 특징을 하위 개념이 물려받는 것
    2. 재사용으로 인해 코드를 줄임
- 상속의 다형성
    1. 부모클래스에서 물려받은 가상함수를 자식클래스 내에서 오버라이딩되어 사용되는 것
    2. 클래스 내부에 동일한 이름의 작업을 여러개 정의하는 것

2. 접근 제어자
- 외부에 공개되는 수준을 의미
- public :  모든 외부에서 직접 접근하거나 호출
- protected : 현재 클래스와 동일한 패키지거나 다른 패키지더라도 상속시 접근하거나 호출
- default : 현재 클래스와 동일한 패키지 내에서만 접근하거나 호출(접근 제어자를 쓰지 않을 경우 default)
- private : 현재 클래스의 {} 바깥쪽에서는 절대 접근하거나 호출할 수 없음
-클래스의 접근 제한
    - public, default 만 사용 가능
    - public인 경우 외부에 클래스를 노출, default는 현재 패키지에서만 접근할 수 있게 함
-필드의 접근 제한
    - public, protected, default, private 모두 사용 가능
    - 일반적으로 private, public static으로 선언하는 것이 일반적
                        |-> 공용 변수
-메소드의 접근 제한
    - public, protected, default, private 모두 사용 가능
    - 추상 메소드의 형태로 메소드를 만들 때 private으로 선언 불가

3. super 키워드
- 부모클래스로부터 상속받은 필드나 메소드를 자식클래스에서 참조하는데 사용하는 참조변수.
- super() 메소드 : 부모클래스의 생성자를 호출할 때 사용

4. this 키워드
- this 참조 변수는 인스턴스가 바로 자기 자신으 참조하는데 사용하는 변수
- this 참조 변수를 사용할 수 있는 영역은 인스턴스 메소드뿐이며,
  클래스 메소드에서는 사용할 수 없다.
- this() 메소드
    1. 생성자 내부에서만 사용할 수 있으며,
      같은 클래스의 다른 생성자를 호출할 때 사용
    2. 인수를 전달하면, 생상자 중에서 메소드 시그니처가 일치하는
      다른 생성자를 찾아 호출

5. 생성자
- new 연산자를 통해 객체를 생성할 때 반드시 호출, 제일 먼저 실행되는 메소드
- 클래스명과 동일한 이름을 가진 메소드
- 필드를 초기화 하는 역할
- 반환 타입 없음
- 직접 생성하지 않으면 JVM이 자동으로 빈 생성자를 만들어 호출

6. 오버로딩
- 메소드명이 같고, 시그니처가 다른 생성자 메소드를 여러개 만드는 것
    - 같은 클래스 내에서 메소드명이 같고, 파라미터의 개수와 타입이 다른 것을 여러개 만드는 것


7. 오버라이딩
- 상속 관계에 있는 부모 클래스에서 이미 정의된 메소드를 자식 클래스에서
  같은 시그니쳐를 갖는 메소드로 다시 정의하는 것이라고 할 수 있다.