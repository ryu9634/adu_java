래퍼 클래스(Wrapper Class)
기본타입의 데이터를 객체로 취급해야 할 경우 객체로 포장해주는 클래스

기본 데이터 타입
byte    -> Byte
short   -> Short
int     -> Integer
long    -> Long
float   -> Float
double  -> Double
char    -> Character
boolean -> Boolean

    String num = "10";
    int i = Integer.parseInt(num);

박싱(Boxing)
기본타입을 래퍼클래스로 변환
    int num = 10;
    Integer i = new Integer(num);

언박싱(UnBoxing)
래퍼클래스를 기본타입으로 변환
    int num = i.inValue();


제네릭(Generic)
클래스나 메소드에서 사용할 데이터의 타입을 컴파일 시에 미리 지정하는 방법

Object 클래스
- 자바의 모든 클래스의 최상위 조상 클래스
- 모든 타입은 Object 클래스 객체화를 시킬 수 있음
- 기본 데이터 타입을 객체화 시킨 래퍼 타입으로 대입을 받을 수 있음

✔ 제네릭을 사용하는 이유
- 다양한 타입의 객체에 재사용을 높일 수 있는 방법
- 클래스에서 사용할 타입을 외부에서 설정
- 반복적인 코드, 불필요한 코드를 사용하지 않도록 재활용 가능
- 강제적인 타입변환을 발생시키지 않음

    public class Box<T> {
        private T num1;
        private T num2;
        public T plus(T num1, T num2){
           return num1 + num2;
        }
    }

    Box<Integer> box = new Box();

    🎁 사용방법
    - 클래스 또는 인터페이스에 <>를 붙이고 타입 파라미터를 지정
    - <>안에는 클래스 타입이 들어가야 함

    타입      뜻
    <T>     Type
    <E>     Element
    <K>     Key
    <V>     Value
    <N>     Number

✔ 제네릭을 사용할 수 없는 경우
- 제네릭으로 배열을 생성할 수 없음
- static 변수를 제네릭으로 사용할 수 없음


추상 클래스(abstract)
- 클래스의 용도가 객체 생성 용도로 사용할 수 없음
- 추상 메소드를 1개이상 가지고 있는 클래스
(추상 메소드 : 자식 클래스에서 반드시 오버라이드 해야 하는 메소드)
- 변수의 타입으로 선언하는 용도와 상속의 본연의 기능으로 특정한 코드를 하위 클래스로 물려주기 위해 생성
- 추상 클래스는 자식 클래스에서 상속을 해야 사용가능하기 때문에 자식 클래스는 다른 클래스를 상속 받을 수 없음
(자바는 단일상속)


final 키워드
- 클래스, 변수, 메소드에서 사용하는 키워드로 변할 수 없는 상태를 나타냄
- final 클래스는 상속할 수 없음
    final class Class1 {
        ....
    }
    class Class2 extends Class1 {   // 에러 !
        ....
    }
- final 변수는 값을 재할당할 수 없음, 변수 -> 상수
     final String str = "Apple";
     str = "Banana";    // 에러 !
- final 메소드는 오버라이딩할 수 없음
    class Class1 {
        final String method1(){
            return "안녕하세요!";
        }
    }
    public class Class2 extends Class1 {
        String method1(){   // 에러 !
            return "반갑습니다!";
        }
    }


인터페이스(interface)
- 자바는 다중 상속을 지원하지 않으므로 인터페이스를 사용해서 다중 상속을 구현
- 다른 클래스를 작성할 때 기본이 되는 틀을 제공하면서, 다른 클래스 사이의 매개 역할을 담당하는 일종의
추상 클래스와 비슷
- 인터페이스는 추상 메소드와 상수만을 포함할 수 있음 -> 인스턴스 메소드, static 메소드도 포함(jdk8)

인터페이스 작성
    접근제어자 interface 인터페이스명 {
        public static final 타입 상수명 = 값;
        public abstract 메소드명(매개변수1, 매개변수2 ..);

    }

✔ 인터페이스의 모든 필드는 public static final 이여야 함
✔ 인터페이스의 모든 메소드는 public abstract 이여야 함

인터페이스 구현
    class 클래스명 implements 인터페이스명 {

    }

    🎁 자바의 상속과 인터페이스의 구현을 동시에 하려면
        class 클래스명 extends 부모클래스명 implements 인터페이스명 {
            ...
        }
    🎁 여러개의 인터페이스를 구현하려면
        class 클래스명 implements 인터페이스명, 인터페이스명, 인터페이스명 .. {
            ...
        }


