예외처리(Exception)

오류(error)
- 자바 컴파일러에 의해 문법 오류를 발생
- 문법이 맞게 작성되었다 하더라도 프로그램을 실행하면서 예상하지 못한 오류가 발생할 수 있음

예외(exception)
- 프로그램 실행 중 비정상적으로 종료
- 예측할 수 있는 예외, 예측하지 못하는 예외
- 런타임시

예외가 발생하는 원인
- 사용자가 잘못된 데이터를 입력하는 경우
- 개발자가 로직이나 계산을 잘못 작성한 경우
- 하드웨어나 네트워크가 제대로 동작하지 못하는 경우
- 악의적으로 잘못된 연산을 요구하거나 시스템을 공격

예외처리
- 예외란 error의 일종이며, 발생시 시스템 및 프로그램을 불능상태로 만듬
- 예외가 발생할 것을 대비하여 미리 예측해 이를 소스상에서 제어하고 처리하도록 만드는 것

예외의 종류
1. Exception(일반 예외)
2. RuntimeException(실행 예외)

✔ Exception을 처리하기 위해 자바에서는 java.lang.Exception을 제공

                        Exception

     컴파일시 발생하는 Exception
  ClassNotFoundException, InterrupedException ..

  프로그램 실행시 발생하는 Runtime Exception
  RuntimeException ...

  Checked Exception                         Unchecked Exception
  - 반드시 예외를 처리                      - 명시적인 처리를 강제하지 않음
  - 컴파일 단계                            - 실행 단계
  - Exception의 상속받은 하위               - RuntimeException 하위 예외
  클래스 중 Runtime Exception을            - roll-back 함
  제외한 모든 예외
  - roll-back 하지 않음

✔ Checked Exception과 Unchecked Exception의 차이는 "예외처리를 꼭! 해야하는지 여부"

예외처리 코드

    try {
        실제 코드가 들어가는 곳으로, 예외 상황이 발생할 가능성이 있는 코드를 작성
        ...
    }catch(예외객체타입1 참조변수1){
        try블록에서 Exception이 발생하면 catch 블록으로 오게 됨
    }catch(예외객체타입2 참조변수2){
        try블록에서 Exception이 발생하면 catch 블록으로 오게 됨
    }catch(예외객체타입3 참조변수3){
        try블록에서 Exception이 발생하면 catch 블록으로 오게 됨
    }
    ...
    }finally{
        try블록에서 Exception 발생의 유무와 상관없이 무조건 실행되는 코드(옵션, 생략가능)
    }

코드 진행 방법
1. 예외가 발생하지 않았을 경우
    try문장 -> finally
2. 예외가 발생했을 경우
    try문장 -> 예외에 맞는 catch문장 -> finally


강제로 예외를 발생시키는 방법
Exception 참조변수 = new Exception("예외가 발생하면 출력될 문자열");

throw 참조변수; // 예외가 발생!

throw
- 강제로 예외를 발생시키고자 할 때 사용
- 현재 메소드의 예외를 처리한 후 상위 메소드에 예외 정보를 전달함

throws
- 현재 메소드에서 자신을 호출한 상위 메소드로 예외를 발생시킴
- 사용하는 메소드를 호출한 상위 메소드에서 예외처리에 대한 책임을 맡김


File 클래스
- 파일(디렉토리) 자체를 다루는 클래스
- 입출력 관한 작업

    File 참조변수 = new File(파일 주소 또는 파일이름);

exists() : 파일이 실제 존재하는 여부
isDirectory() : 해당 경로가 디렉토리인지 여부
isFile() : 해당 경로가 파일인지 여부
length() : 파일 데이터 길이(byte)를 반환, 한글은 3byte, 영어/특수문자/띄어쓰기 1byte

mkdir() : 폴더를 생성
createNewFile() : 파일을 생성
renameTo() : 매개변수로 전달된 파일과 같은 디렉토리로 이름 변경 및 이동 수행


스트림(stream)
- 자바는 파일이나 콘솔의 입출력을 직접 다루지 않고 스트림이라는 흐름을 통해 다룸
- 운영체제에 의해 생성되는 가상의 연결고리를 의미하고 중간 매개자 역할을 함

    Java 프로그램   ------> OS(운영체제)    -------> 모니터, 프린터, 디스크, 네트워크
                   <------                <-------

FileInputStream 클래스
- java.io의 가장 기본이 되는 입력 클래스
- 입력 스트림(통로)을 생성해줌
- 버퍼를 사용하지 않기 때문에 느릴 수 있음
- 속도 문제를 해결하기 위해 버퍼를 사용하는 다른 클래스와 같이 사용하는 것이 일반적

read() : 스트림을 통해 byte 단위로 데이터를 읽어옴


FileOutputStream 클래스
- java.io의 가장 기본이 되는 출력 클래스
- 출력 스트림(통로)을 생성해줌
- 버퍼를 사용하지 않기 때문에 느릴 수 있음
- 속도 문제를 해결하기 위해 버퍼를 사용하는 다른 클래스와 같이 사용하는 것이 일반적

write() : 스트림을 통해 byte단위로 데이터를 씀


FileReader 클래스
- FileInputStream과 유사
- 문자 스트림으로서 문자 단위의 바이트 변환 기능을 가지고 있음
- 바이트 단위가 아닌 문자 단위로 입출력을 실행

FileWriter 클래스
- FileOutputStream과 유사
- 문자 스트림으로서 문자 단위의 바이트 변환 기능을 가지고 있음
- 바이트 단위가 아닌 문자 단위로 입출력을 실행

PrintWriter 클래스
- 문자열을 출력하는 스트림 Writer 속성을 가진 클래스
- OutputStream의 자식 클래스이며 byte 단위 출력 클래스인 PrintStream의 Print메소드를 모두 구현하여
사용할 수 있음


과제.
아래 data.txt를 읽어 다음과 같이 출력하는 프로그램을 작성해보자.
(학점은 평균기준이며 90점이상은 A, 80점이상은 B, 70점이상은 C, 60점이상은 D, 나머지는 F)
data.txt
김사과,90,80,100
오렌지,100,90,70
반하나,60,80,90
이메론,70,80,85

결과
********** 성적 프로그램 **********
이름 : 김사과
국어점수 : 90
영어점수 : 80
수학점수 : 100
총점 : XXX
평균 : XXX
학점 : XXX

이름 : 오렌지
국어점수
...
